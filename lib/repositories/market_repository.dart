import '../dio/db/market_db.dart';
import '../models/market.dart';
import '../dio/services/market_service.dart';

class MarketRepository {
  final MarketService _marketService = MarketService();
  final MarketDatabase _marketDb = MarketDatabase.instance;

  /// üîπ **–ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ç–æ–≤ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î**
  Future<List<Market>> getMarketsFromLocal() async {
    return await _marketDb.getMarkets();
  }

  /// üîπ **–ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ç–æ–≤ —Å —Å–µ—Ä–≤–µ—Ä–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –ë–î**
  Future<List<Market>> getMarketsFromServerAndSave() async {
    try {
      List<Market> markets = await _marketService.getMarkets();
      await _marketDb.insertMarkets(markets);
      print("‚úÖ –ú–∞—Ä–∫–µ—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö");
      return markets;
    } catch (e) {
      print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞—Ä–∫–µ—Ç–æ–≤ —Å —Å–µ—Ä–≤–µ—Ä–∞: $e");
      return [];
    }
  }

  /// üîπ **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –º–∞—Ä–∫–µ—Ç–∞**
  Future<bool> addMarket({
    required String name,
    required String token,
    required String shopId,
  }) async {
    try {
      Market? newMarket = await _marketService.createMarket(
        name: name,
        token: token,
        shopId: shopId,
      );

      if (newMarket != null) {
        await _marketDb.insertMarkets([newMarket]);
        print("‚úÖ –ù–æ–≤—ã–π –º–∞—Ä–∫–µ—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ");
        return true;
      }
    } catch (e) {
      print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–∞—Ä–∫–µ—Ç–∞: $e");
    }
    return false;
  }

  /// üîπ **–£–¥–∞–ª–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ç–∞**
  Future<bool> deleteMarket(int marketId) async {
    try {
      final success = await _marketService.deleteMarket(marketId);
      if (success) {
        await _marketDb.deleteMarket(marketId);
        print("‚úÖ –ú–∞—Ä–∫–µ—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω");
        return true;
      }
      print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –º–∞—Ä–∫–µ—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ");
      return false;
    } catch (e) {
      print("‚ùå –û—à–∏–±–∫–∞ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–∞—Ä–∫–µ—Ç–∞: $e");
      throw e;
    }
  }

  /// üîπ **–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º**
  Future<void> syncWithServer() async {
    try {
      await _marketDb.deleteAllMarkets();
      await getMarketsFromServerAndSave();
      print("‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞");
    } catch (e) {
      print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å —Å–µ—Ä–≤–µ—Ä–æ–º: $e");
      throw e;
    }
  }

  /// üîπ **–ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ç–∞ –ø–æ ID**
  Future<Market?> getMarketById(int marketId) async {
    try {
      return await _marketDb.getMarketById(marketId);
    } catch (e) {
      print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞—Ä–∫–µ—Ç–∞ –ø–æ ID: $e");
      return null;
    }
  }

  /// üîπ **–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –º–∞—Ä–∫–µ—Ç–∞**
  Future<bool> marketExists(int marketId) async {
    try {
      return await _marketDb.marketExists(marketId);
    } catch (e) {
      print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –º–∞—Ä–∫–µ—Ç–∞: $e");
      return false;
    }
  }

  /// üîπ **–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–∞—Ä–∫–µ—Ç–æ–≤**
  Future<int> getMarketsCount() async {
    try {
      return await _marketDb.getMarketsCount();
    } catch (e) {
      print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–∞—Ä–∫–µ—Ç–æ–≤: $e");
      return 0;
    }
  }

  /// üîπ **–û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö**
  Future<void> clearAllData() async {
    try {
      await _marketDb.deleteAllMarkets();
      print("‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã");
    } catch (e) {
      print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: $e");
      throw e;
    }
  }

  /// üîπ **–ó–∞–∫—Ä—ã—Ç–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è**
  Future<void> dispose() async {
    try {
      await _marketDb.close();
      print("‚úÖ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç");
    } catch (e) {
      print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è: $e");
      throw e;
    }
  }
}