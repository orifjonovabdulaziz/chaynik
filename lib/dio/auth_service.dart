import 'package:dio/dio.dart';
import 'package:shared_preferences/shared_preferences.dart';

import 'auth_interceptor.dart';

class AuthService {
  final Dio _dio = Dio(BaseOptions(
    baseUrl: "http://192.168.31.174:8000", // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π API
    connectTimeout: Duration(seconds: 10),
    receiveTimeout: Duration(seconds: 10),
  ));

  AuthService() {
    _dio.interceptors.add(AuthInterceptor());
  }

  /// üîπ **POST-–∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é**
  Future<String?> login(String email, String password) async {
    try {
      Response response = await _dio.post(
        '/api/accounts/login/',
        data: {"username": email, "password": password},
      );

      if (response.statusCode == 200) {
        String token = response.data['token'];
        await _saveToken(token); // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ
        return token;

      }
    } on DioException catch (e) {
      if (e.response?.statusCode == 400) {
        return null; // –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å

      }
    }
    return null; // –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –∏–ª–∏ —Å–µ—Ä–≤–µ—Ä–∞
  }

  /// üîπ **–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –≤ SharedPreferences**
  Future<void> _saveToken(String token) async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setString('auth_token', token);
  }

  /// üîπ **–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞**
  Future<String?> getToken() async {
    final prefs = await SharedPreferences.getInstance();
    return prefs.getString('auth_token');
  }

  /// üîπ **–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã (—É–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞)**
  Future<String?> logout() async {
    try{
      Response response = await _dio.get('/api/accounts/logout/');
      print("Response is My Response: ${response.statusCode}");
      if (response.statusCode == 200) {
        final prefs = await SharedPreferences.getInstance();
        await prefs.remove('auth_token');
        return "–í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω";
      }
      return null;

    }on DioException catch(e){
      return "–ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫";
    }

  }


  Future<Response> fetchData() async {
    return await _dio.get('/data');
  }
}
