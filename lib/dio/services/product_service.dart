import 'package:dio/dio.dart';
import '../../models/product.dart';
import '../services/api_service.dart'; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π `ApiService`

class ProductService {
  /// üîπ **–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤**
  Future<List<Product>> getProducts() async {
    try {
      Response response = await ApiService.dio.get('/api/product/');
      print(response.data);
      if (response.statusCode == 200) {
        List data = response.data;
        return data.map((json) => Product.fromJson(json)).toList();
      }
    } catch (e) {
      print("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤: $e");
    }
    return [];
  }

  /// üîπ **–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç**
  Future<Product?> addProduct(
      String title, double price, String imagePath, int categoryId) async {
    try {
      FormData formData = FormData.fromMap({
        "title": title,
        "price": price.toString(),
        "image": await MultipartFile.fromFile(imagePath,
            filename: imagePath.split('/').last),
        "category": categoryId,
      });

      Response response = await ApiService.dio.post(
        '/api/product/',
        data: formData,
      );
      print(response.data);

      if (response.statusCode == 201 || response.statusCode == 200) {
        print("–ü—Ä–æ–¥—É–∫—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω");
        return Product.fromJson(response.data);
      }
    } catch (e) {
      print("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞: $e");
    }
    return null;
  }

  /// üîπ **–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç**
  Future<bool> deleteProduct(int productId) async {
    try {
      Response response =
          await ApiService.dio.delete('/api/product/$productId/');

      if (response.statusCode == 204 || response.statusCode == 200) {
        print("–ü—Ä–æ–¥—É–∫—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω");
        return true;
      }

      print(
          "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∫–æ–¥ ${response.statusCode}");
      return false;
    } catch (e) {
      print("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞: $e");
      rethrow; // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ repository
    }
  }

  /// üîπ **–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ (PATCH)**
  Future<Product?> updateProduct(
    int productId, {
    String? title,
    int? category,
    String? image,
    double? price,

  }) async {
    try {
      // –°–æ–∑–¥–∞—ë–º `FormData`
      FormData formData = FormData();

      if (title != null) formData.fields.add(MapEntry("title", title));
      if (category != null)
        formData.fields.add(MapEntry("category", category.toString()));
      if (price != null)
        formData.fields.add(MapEntry("price", price.toString()));

      if (image != null) {
        formData.files.add(MapEntry(
          "image",
          await MultipartFile.fromFile(image, filename: image.split('/').last),
        ));
      }

      if (formData.fields.isEmpty && formData.files.isEmpty) {
        print("‚ùå –û—à–∏–±–∫–∞: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è");
        return null;
      }

      Response response = await ApiService.dio.patch(
        '/api/product/$productId/',
        data: formData,
        options: Options(headers: {
          "Content-Type": "multipart/form-data",
        }),
      );

      if (response.statusCode == 200) {
        print("‚úÖ –ü—Ä–æ–¥—É–∫—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω");
        return Product.fromJson(response.data);
      }

      print("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞: –ö–æ–¥ ${response.statusCode}");
      return null;
    } catch (e) {
      print("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞: $e");
      rethrow;
    }
  }
}
