import 'package:chaynik/models/client.dart';
import 'package:dio/dio.dart';

import 'api_service.dart';

class ClientService {
  /// üîπ **–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤**
  Future<List<Client>> getClients() async {
    try {
      Response response = await ApiService.dio.get('/api/client/');
      print(response.data);
      if (response.statusCode == 200) {
        List data = response.data;
        return data.map((json) => Client.fromJson(json)).toList();
      }
    } catch (e) {
      print("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤: $e");
    }
    return [];
  }

  /// üîπ **–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç**
  Future<Client?> addClient(String fullName, String content, double debt) async {
    try {

      Response response = await ApiService.dio.post(
        '/api/client/',
        data: {
          "full_name": fullName,
          "content": content,
          "debt": debt
        },
      );
      print(response.data);

      if (response.statusCode == 201 || response.statusCode == 200) {
        print("–ö–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω");
        return Client.fromJson(response.data);
      }
    } catch (e) {
      print("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞: $e");
    }
    return null;
  }

  /// üîπ **–£–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞**
  Future<bool> deleteClient(int clientId) async {
    try {
      Response response =
      await ApiService.dio.delete('/api/client/$clientId/');

      if (response.statusCode == 204 || response.statusCode == 200) {
        print("–ö–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω");
        return true;
      }

      print(
          "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∫–æ–¥ ${response.statusCode}");
      return false;
    } catch (e) {
      print("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞: $e");
      rethrow; // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ repository
    }
  }

  /// üîπ **–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ (PATCH)**
  Future<bool> updateClient(
      int clientId, {
        String? fullname,
        String? content,
        double? debt,
      }) async {
    try {
      Map<String, dynamic> updateData = {};

      if (fullname != null) updateData["full_name"] = fullname;
      if (content != null) updateData["content"] = content;
      if (debt != null) updateData["debt"] = debt.toString();


      if (updateData.isEmpty) {
        print("‚ùå –û—à–∏–±–∫–∞: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è");
        return false;
      }

      Response response = await ApiService.dio.patch(
        '/api/client/$clientId/',
        data: updateData,
      );

      if (response.statusCode == 200) {
        print("‚úÖ –ö–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω");
        return true;
      }

      print("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞: –ö–æ–¥ ${response.statusCode}");
      return false;
    } catch (e) {
      print("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞: $e");
      rethrow;
    }
  }
}