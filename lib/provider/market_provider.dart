import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../models/market.dart';
import '../repositories/market_repository.dart';

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –º–∞—Ä–∫–µ—Ç–æ–≤
class MarketState {
  final List<Market> markets;
  final bool isLoading;
  final String? error;
  final Market? selectedMarket;

  MarketState({
    this.markets = const [],
    this.isLoading = false,
    this.error,
    this.selectedMarket,
  });

  MarketState copyWith({
    List<Market>? markets,
    bool? isLoading,
    String? error,
    Market? selectedMarket,
  }) {
    return MarketState(
      markets: markets ?? this.markets,
      isLoading: isLoading ?? this.isLoading,
      error: error,
      selectedMarket: selectedMarket ?? this.selectedMarket,
    );
  }
}

// Notifier –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –º–∞—Ä–∫–µ—Ç–æ–≤
class MarketNotifier extends StateNotifier<MarketState> {
  final MarketRepository _repository;

  MarketNotifier(this._repository) : super(MarketState()) {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –º–∞—Ä–∫–µ—Ç—ã –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    loadMarkets();
  }

  /// üîπ **–ó–∞–≥—Ä—É–∑–∫–∞ –º–∞—Ä–∫–µ—Ç–æ–≤**
  Future<void> loadMarkets() async {
    try {
      state = state.copyWith(isLoading: true, error: null);

      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å —Å–µ—Ä–≤–µ—Ä–∞
      final markets = await _repository.getMarketsFromServerAndSave();

      state = state.copyWith(
        markets: markets,
        isLoading: false,
      );
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–∞—Ä–∫–µ—Ç–æ–≤: $e');

      // –ü—Ä–∏ –æ—à–∏–±–∫–µ –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î
      try {
        final localMarkets = await _repository.getMarketsFromLocal();
        state = state.copyWith(
          markets: localMarkets,
          isLoading: false,
          error: '–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î',
        );
      } catch (e) {
        state = state.copyWith(
          isLoading: false,
          error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–∞—Ä–∫–µ—Ç–æ–≤: $e',
        );
      }
    }
  }

  /// üîπ **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ç–∞**
  Future<bool> addMarket({
    required String name,
    required String token,
    required String shopId,
  }) async {
    try {
      state = state.copyWith(isLoading: true, error: null);

      final success = await _repository.addMarket(
        name: name,
        token: token,
        shopId: shopId,
      );

      if (success) {
        await loadMarkets(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        return true;
      }

      state = state.copyWith(
        isLoading: false,
        error: '–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –º–∞—Ä–∫–µ—Ç',
      );
      return false;
    } catch (e) {
      state = state.copyWith(
        isLoading: false,
        error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–∞—Ä–∫–µ—Ç–∞: $e',
      );
      return false;
    }
  }

  /// üîπ **–£–¥–∞–ª–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ç–∞**
  Future<bool> deleteMarket(int marketId) async {
    try {
      state = state.copyWith(isLoading: true, error: null);

      final success = await _repository.deleteMarket(marketId);
      if (success) {
        if (state.selectedMarket?.id == marketId) {
          clearSelectedMarket();
        }
        await loadMarkets(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
        return true;
      }

      state = state.copyWith(
        isLoading: false,
        error: '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –º–∞—Ä–∫–µ—Ç',
      );
      return false;
    } catch (e) {
      state = state.copyWith(
        isLoading: false,
        error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–∞—Ä–∫–µ—Ç–∞: $e',
      );
      return false;
    }
  }

  /// üîπ **–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö**
  Future<void> refreshData() async {
    try {
      state = state.copyWith(isLoading: true, error: null);
      await _repository.syncWithServer();
      await loadMarkets();
    } catch (e) {
      state = state.copyWith(
        isLoading: false,
        error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: $e',
      );
    }
  }

  /// üîπ **–í—ã–±–æ—Ä –º–∞—Ä–∫–µ—Ç–∞**
  void selectMarket(Market market) {
    state = state.copyWith(selectedMarket: market);
  }

  /// üîπ **–û—á–∏—Å—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–∞—Ä–∫–µ—Ç–∞**
  void clearSelectedMarket() {
    state = state.copyWith(selectedMarket: null);
  }

  /// üîπ **–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–∞—Ä–∫–µ—Ç–æ–≤**
  Future<int> getMarketsCount() async {
    try {
      return await _repository.getMarketsCount();
    } catch (e) {
      print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–∞—Ä–∫–µ—Ç–æ–≤: $e");
      return 0;
    }
  }

  /// üîπ **–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö**
  Future<void> clearAllData() async {
    try {
      state = state.copyWith(isLoading: true, error: null);
      await _repository.clearAllData();
      state = state.copyWith(
        markets: [],
        selectedMarket: null,
        isLoading: false,
      );
    } catch (e) {
      state = state.copyWith(
        isLoading: false,
        error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: $e',
      );
    }
  }

  /// üîπ **–û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤**
  @override
  void dispose() {
    _repository.dispose();
    super.dispose();
  }
}

// –ü—Ä–æ–≤–∞–π–¥–µ—Ä—ã
final marketRepositoryProvider = Provider<MarketRepository>((ref) {
  return MarketRepository();
});

final marketProvider = StateNotifierProvider<MarketNotifier, MarketState>((ref) {
  final repository = ref.watch(marketRepositoryProvider);
  return MarketNotifier(repository);
});

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω—ã–º
final marketsListProvider = Provider<List<Market>>((ref) {
  return ref.watch(marketProvider).markets;
});

final selectedMarketProvider = Provider<Market?>((ref) {
  return ref.watch(marketProvider).selectedMarket;
});

final marketLoadingProvider = Provider<bool>((ref) {
  return ref.watch(marketProvider).isLoading;
});

final marketErrorProvider = Provider<String?>((ref) {
  return ref.watch(marketProvider).error;
});

// –ü—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–∞—Ä–∫–µ—Ç–æ–≤
final marketCountProvider = FutureProvider<int>((ref) async {
  final notifier = ref.watch(marketProvider.notifier);
  return await notifier.getMarketsCount();
});