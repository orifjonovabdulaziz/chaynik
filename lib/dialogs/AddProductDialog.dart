import 'dart:ffi';
import 'dart:io';

import 'package:chaynik/models/category.dart';
import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:image_picker/image_picker.dart';
import 'package:permission_handler/permission_handler.dart';

import '../dio/db/category_db.dart';
import '../dio/services/product_service.dart';
import '../repositories/category_repository.dart';
import 'AddCategoryDialog.dart';

void showAddProductDialog(BuildContext context) {
  final GlobalKey<FormState> _formKey = GlobalKey<FormState>();
  final CategoryRepository _categoryRepository = CategoryRepository();

  final ProductService _productService = ProductService();

  String _product_name = '';
  double _product_price = 0.0;

  File? _image;
  final ImagePicker _picker = ImagePicker();


  List<Category> _categories = [];
  String? _selectedCategory;



  showDialog(
    context: context,
    builder: (BuildContext context) {
      return StatefulBuilder( // üîπ –ò—Å–ø–æ–ª—å–∑—É–µ–º StatefulBuilder –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
        builder: (context, setState) {

          /// üîπ **–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π**
          Future<void> _fetchCategories() async {
            List<Category> localCategories = await _categoryRepository.getCategoriesFromLocal();
            setState(() {
              _categories = localCategories;
            }); // –û–±–Ω–æ–≤–ª—è–µ–º UI –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
          }


          Future<bool> _requestStoragePermission() async {
            var status = await Permission.manageExternalStorage.request();

            if (status.isGranted) {
              return true; // –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ —É–∂–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ
            } else if (status.isDenied) {
              status = await Permission.storage.request();
              return status.isGranted;
            } else if (status.isPermanentlyDenied) {
              print("–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞–≤—Å–µ–≥–¥–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ, –æ—Ç–∫—Ä–æ–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.");
              openAppSettings();
              return false;
            }

            return false;
          }


          Future<void> _pickImage() async {
            // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
            if (await _requestStoragePermission()) {
              final pickedFile = await _picker.pickImage(source: ImageSource.gallery);
              if (pickedFile != null) {
                setState(() {
                  _image = File(pickedFile.path);
                });
              }
            } else {
              print("–ù–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –¥–æ—Å—Ç—É–ø –∫ –≥–∞–ª–µ—Ä–µ–µ");
            }
          }



          /// üîπ **–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø—É—Å—Ç**
          if (_categories.isEmpty) {
            _fetchCategories();
          }

          return AlertDialog(
            title: Text("–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä"),
            content: Form(
              key: _formKey,
              child: SingleChildScrollView(
                child: Column(
                  children: [
                    TextFormField(
                      decoration: InputDecoration(labelText: "–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"),
                      validator: (value) {
                        if (value == null || value.isEmpty) {
                          return "Please enter some text";
                        }
                        return null;
                      },
                      onSaved: (value) {
                        _product_name = value ?? '';
                      },
                    ),
                    TextFormField(
                      decoration: InputDecoration(labelText: "–¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞"),
                      validator: (value) {
                        if (value == null || value.isEmpty) {
                          return "Please enter some price";
                        }
                        if (double.tryParse(value) == null) {
                          return "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ";
                        }
                        return null;
                      },
                      onSaved: (value) {
                        _product_price = double.tryParse(value ?? '0') ?? 0.0;
                      },
                      keyboardType: TextInputType.number,
                    ),
                    DropdownButton<String>(
                      value: _selectedCategory,
                      hint: Text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é"),
                      items: [
                        ..._categories.map((category) => DropdownMenuItem<String>(
                          value: category.id.toString(),
                          child: Text(category.title),
                        )),
                        DropdownMenuItem<String>(
                          value: "add_category",
                          child: Text(
                            "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é",
                            style: TextStyle(color: Colors.blue),
                          ),
                        ),
                      ],
                      onChanged: (value) {
                        if (value == "add_category") {
                          showAddCategoryDialog(context);
                        } else {
                          setState(() {
                            _selectedCategory = value; // üîπ –û–±–Ω–æ–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
                          });
                        }
                      },
                    ),
                    _image != null
                        ? Image.file(_image!, height: 200, width: 200, fit: BoxFit.cover)
                        : ElevatedButton(
                      onPressed: _pickImage,
                      child: Text("–í—ã–±—Ä–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"),
                    ),
                  ],
                ),
              ),
            ),
            actions: [
              TextButton(
                onPressed: () => Navigator.of(context).pop(),
                child: Text("–û—Ç–º–µ–Ω–∞"),
              ),
              ElevatedButton(
                onPressed: () async {
                  if (_formKey.currentState!.validate()) {
                    _formKey.currentState!.save();

                    bool success = await _productService.addProduct(
                      _product_name,
                      _product_price,
                      _image!.path,
                      int.parse(_selectedCategory!),
                    );

                    if (success) {
                      print("–ü—Ä–æ–¥—É–∫—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!");
                    } else {
                      print("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞.");
                    }

                    print("–ù–∞–∑–≤–∞–Ω–∏–µ: $_product_name, –¶–µ–Ω–∞: $_product_price, –ö–∞—Ç–µ–≥–æ—Ä–∏—è: $_selectedCategory");
                    Navigator.of(context).pop();
                  }
                },
                child: Text("–î–æ–±–∞–≤–∏—Ç—å"),
              ),
            ],
          );
        },
      );
    },
  );

}
