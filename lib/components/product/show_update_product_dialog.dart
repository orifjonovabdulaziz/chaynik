import 'dart:io';

import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:image_picker/image_picker.dart';
import 'package:permission_handler/permission_handler.dart';

import '../../models/product.dart';
import '../../provider/category_provider.dart';
import '../../provider/product_provider.dart';
import '../category/AddCategoryDialog.dart';

void showUpdateProductDialog(
    BuildContext context, WidgetRef ref, Product product) {
  final GlobalKey<FormState> _formKey = GlobalKey<FormState>();

  // –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–æ–ª–µ–π
  final TextEditingController _titleController =
      TextEditingController(text: product.title);
  final TextEditingController _priceController =
      TextEditingController(text: product.price.toString());

  String? _selectedCategory = product.categoryId.toString();
  String? _imagePath; // –î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

  File? _image;
  final ImagePicker _picker = ImagePicker();

  showDialog(
    context: context,
    builder: (BuildContext context) {
      return Consumer(builder: (context, ref, _) {
        final categoriesAsync = ref.watch(categoryProvider);

        return StatefulBuilder(
          builder: (context, setState) {
            Future<bool> _requestStoragePermission() async {
              var status = await Permission.manageExternalStorage.request();

              if (status.isGranted) {
                return true; // –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ —É–∂–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ
              } else if (status.isDenied) {
                status = await Permission.storage.request();
                return status.isGranted;
              } else if (status.isPermanentlyDenied) {
                print(
                    "–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞–≤—Å–µ–≥–¥–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ, –æ—Ç–∫—Ä–æ–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.");
                openAppSettings();
                return false;
              }

              return false;
            }

            Future<void> _pickImage() async {
              // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
              if (await _requestStoragePermission()) {
                final pickedFile =
                    await _picker.pickImage(source: ImageSource.gallery);
                if (pickedFile != null) {
                  setState(() {
                    _image = File(pickedFile.path);
                  });
                }
              } else {
                print("–ù–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –¥–æ—Å—Ç—É–ø –∫ –≥–∞–ª–µ—Ä–µ–µ");
              }
            }

            return AlertDialog(
              title: const Text(
                '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞',
                style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
              ),
              content: Form(
                key: _formKey,
                child: SingleChildScrollView(
                  child: Column(
                    mainAxisSize: MainAxisSize.min,
                    children: [
                      TextFormField(
                        controller: _titleController,
                        decoration: InputDecoration(
                          labelText: "–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞",
                          border: OutlineInputBorder(
                            borderRadius: BorderRadius.circular(8),
                          ),
                        ),
                        validator: (value) {
                          if (value == null || value.isEmpty) {
                            return "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ";
                          }
                          return null;
                        },
                      ),
                      const SizedBox(height: 10),
                      TextFormField(
                        controller: _priceController,
                        decoration: InputDecoration(
                          labelText: "–¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞",
                          border: OutlineInputBorder(
                            borderRadius: BorderRadius.circular(8),
                          ),
                        ),
                        keyboardType: TextInputType.number,
                        validator: (value) {
                          if (value == null || value.isEmpty) {
                            return "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É";
                          }
                          if (double.tryParse(value) == null) {
                            return "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ";
                          }
                          return null;
                        },
                      ),
                      const SizedBox(height: 10),

                      // –ö–∞—Ç–µ–≥–æ—Ä–∏—è (Dropdown)
                      categoriesAsync.when(
                        data: (categories) => DropdownButton<String>(
                          value: _selectedCategory,
                          hint: Text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é"),
                          items: [
                            ...categories
                                .map((category) => DropdownMenuItem<String>(
                                      value: category.id.toString(),
                                      child: Text(category.title),
                                    )),
                            DropdownMenuItem<String>(
                              value: "add_category",
                              child: Text(
                                "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é",
                                style: TextStyle(color: Colors.blue),
                              ),
                            ),
                          ],
                          onChanged: (value) {
                            if (value == "add_category") {
                              showAddCategoryDialog(context, ref);
                            } else {
                              setState(() {
                                _selectedCategory =
                                    value; // üîπ –û–±–Ω–æ–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
                              });
                            }
                          },
                        ),
                        loading: () =>
                            Center(child: CircularProgressIndicator()),
                        error: (error, stack) =>
                            Text('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: $error'),
                      ),
                      const SizedBox(height: 10),

                      // –í—ã–±–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                      _image != null
                          ? GestureDetector(
                              onTap: _pickImage,
                              child: Image.file(_image!,
                                  height: 200, width: 200, fit: BoxFit.cover),
                            )
                          : GestureDetector(
                              onTap: _pickImage,
                              child: Image.network(product.imageUrl,
                                  height: 200, width: 200, fit: BoxFit.cover)),
                    ],
                  ),
                ),
              ),
              actions: [
                TextButton(
                  onPressed: () => Navigator.of(context).pop(),
                  child: const Text(
                    '–û—Ç–º–µ–Ω–∞',
                    style: TextStyle(
                        color: Colors.grey, fontWeight: FontWeight.bold),
                  ),
                ),
                TextButton(
                  onPressed: () {
                    if (_formKey.currentState!.validate()) {
                      ref.read(productProvider.notifier).updateProduct(
                            product.id,
                            title: _titleController.text,
                            price: double.parse(_priceController.text),
                            category: int.parse(_selectedCategory!),
                            image: _image!.path, // –ï—Å–ª–∏ –Ω–µ –º–µ–Ω—è–ª–∏, –æ—Å—Ç–∞–Ω–µ—Ç—Å—è null
                          );
                      Navigator.of(context).pop();

                      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–Ω–µ–∫–±–∞—Ä
                      ScaffoldMessenger.of(context).showSnackBar(
                        SnackBar(
                          content: Text(
                              '–ü—Ä–æ–¥—É–∫—Ç "${_titleController.text}" –æ–±–Ω–æ–≤–ª—ë–Ω'),
                          backgroundColor: Colors.green,
                          duration: const Duration(seconds: 2),
                        ),
                      );
                    }
                  },
                  child: const Text(
                    '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å',
                    style: TextStyle(
                        color: Colors.blue, fontWeight: FontWeight.bold),
                  ),
                ),
              ],
            );
          },
        );
      });
    },
  );
}
